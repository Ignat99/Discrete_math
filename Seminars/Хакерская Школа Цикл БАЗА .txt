По эту сторону Океана

Илья Васильев
01.04.2000
Компьютер в школе, #03/2000	Версия для печати 
Выскажите свое мнение
Эпоха до Сети

Мне известно, что в Новосибирске существовала хорошая хэкерская тусовка, ибо еще в советское время доходили до нас замечательные (как сейчас принято говорить — «свободные») программы VFY (verify), FIX (FAT Fixer), DBG (debugger) и TOR (Текстовый Оконный Редактор). Об этом вам лучше спросить у Сержа Терехова, известного по FIDO своим мэйлером «Бинкоплюсом». Я помню, как во время сисопки на ВДНХ мы собирали деньги Сержу на скоростной модем, чтобы он согласился поддерживать его в следующих релизах Bink/+’а.

Я могу рассказать лишь о становлении хэкерства в Москве, да еще о той части нашего движения, которая продолжает традиции советских неформалов. Кстати, современные неформалы, бунтующие против власти полиции и денег над людьми, мне гораздо ближе старых «гениев», которым совок «не давал раскрутиться и жить как людям».

Центры, где зарождалось и развивалось хэкерство в Москве, назвать просто – это были те редкие места, где подросткам удавалось добраться до первых завезенных к нам компьютеров. ВЦ Академии Наук, Дворец Пионеров (теперь – Дворец Творчества), УПЦ ВТ (теперь – Лицей Информационных Технологий), позже – ДНТТМ. Конечно, тусовочки возникали и вокруг детей богатых или высокопоставленных родителей, но кошелек родителей не всегда способствует развитию ума у ребенка. Кроме того, чем больше ребят имели доступ к технике, тем больше был коллективный разум хэкерского сообщества, находящий всякие недокументированные дыры и «особенности», тем больше была вероятность, что среди народа найдется кто-нибудь толковый.

Хэкерство процветало там, где учителя сознательно (или неосознанно?) выстраивали иерархические системы по принципу знаний и умений. Больше всего мы, новички, ценили и слушались тех, кто создавал общедоступные программы, чьи имена мы видели на экранах своих мониторов. После ухода из УПЦ ВТ Юрия Галутина, автора клона MSX-DOS’а (это не опечатка), порядок, установленный им, еще долго передавался как устное предание. Школьники допускались к компьютерам только с рукописным текстом программы, над которой они собирались работать. На листочке с текстом должно было также указываться ориентировочное время работы над программой и подпись учителя. На выходе из компьютерного класса школьник предъявлял распечатку своей, уже отлаженной, программы. Да, тяжел путь к мастерству...

Дворец был замечателен тем, что туда мог прийти каждый, вне зависимости от номера и престижности школы. К УПЦ ВТ было прикреплено лишь несколько школ, зато учителям удалось создать сообщество студентов-выпускников. Приглянувшиеся им школьники (а оценивали нас исключительно за знания и интеллект) могли оставаться за компьютерами после занятий. Часто за компьютерное время или ответ на вопрос нам приходилось расплачиваться, бегая к метро «Университет» за дешевыми пирожками по пять копеек. Пирожки доставались и школьникам, мы делились не только программами. В УПЦ, впрочем, как и во Дворце, была та самая атмосфера кооперации, которую стремится воссоздать в Америке Ричард Столлмен.

Иерархия по знаниям (слово «элита» всеми подразумевалась, но очень редко использовалась в устной и письменной речи) всеми воспринималась естественно, как нечто вынужденное и временное, пока не научишься. Действительно, кто бы отказался от знакомства с человеком, способным за поеданием пирожка решить проблему, над которой ты уже бьешься целый месяц! А кто подпустил бы чайника к единственному в классе дисководу и принтеру! Он бы забил бумагой все дырки в дисководе, а на дискетах распечатывал свой недоделанный «Hello, World!». (Кстати, большей популярностью пользовалась BASIC-программа, спрашивающая имя пользователя и выводящая его обратно с пометкой «-придурок!»). Старшие всегда относились с пониманием к младшим и помогали им на нелегком пути хэкера. (Особенно, если младшие не выпендривались и на столе всегда были пирожки. Культура взяточничества махрово процветала, и сытые студенты были значительно дружелюбнее и разговорчивее голодных. Совместная трапеза вообще всегда сближает. ;-) )

Если мы доставали «буржуйскую» программу с защитой от копирования, то с радостью ломали ее, чтобы «все смогли пользоваться». Мы чувствовали себя героями, Робин Гудами, революционерами, наносящими удар акулам капитализма. Новую игру всегда пытались взломать все, способные на взлом, а дыры (с именами первых взломавших) вскоре начали записывать в специальный файл, GAME.DOC. Количеством вхождений в этот файл гордились, как перьями в волосах, звездочками на погонах или бортах самолетов. Впрочем, это было развлечение лишь до определенного уровня мастерства (по современной шкале, до уровня зеленого браслета). Старшие хэкеры если и играли, то принципиально лишь в невзломанные игры, а людей продолжали оценивать по количеству сделанных добротных программ, которыми пользовалось все сообщество.

Когда СССР развалили, нам стали навязывать другую «культуру», мир копирайта. К чему это двуличие? Россия всегда была родиной «пиратства» и свободного софта. Если закон теперь запрещает использовать скопированные лицензионные программы, давайте их не использовать. Многие люди моего поколения, бастарды Майкрософта, вскормленные ворованным софтом в стране, не знающей авторских прав, перешли теперь в лагерь Линуса Торвальдса и Ричарда Столлмана.

Эпоха FIDO

Сеть FIDO всегда была средоточием технической элиты. Даже сейчас, когда компьютеры появились в каждой организации и в большинстве семей (а количество специалистов увеличилось незначительно), средний уровень «фидошника» выше среднего уровня пользователя Интернет.

Это и понятно – чтобы воспользоваться бесплатной сетью FIDO, вам придется самому инсталлировать, настроить и связать друг с другом не менее пяти сложных программ. А на то, чтобы постигнуть фидошную культуру и тонкости работы сети, уйдет не менее года.

Для большинства сеть FIDO начиналась с лазания терминалом по BBS — электронным доскам объявлений. Привлеченные большим количеством свободных программ, пользователи постепенно узнают об областях сообщений (Message Areas), заводят друзей, разбирающихся лучше них в компьютерах.

FIDO быстро объединило разрозненные хэкерские тусовки разных городов. Такие эхоконференции, как SU.HARDWARE и RU.HACKER стали университетами для сотен русскоязычных хэкеров. Доступность электронных текстов, которые легко пересекают любые границы, дала доступ читающей по-английски публике к мировой хэкерской культуре. Хотя культура FIDO/BBS сильно отличается от культуры хэкеров Интернет, в 90-е наметилось их серьезное сближение.

У FIDO появились официальные сайты в Интернет, международный трафик FIDO стал качаться по Интернет, создатели мэйлеров и систем BBS начали распространять свои программы через ftp и Web-сайты.

Сеть FIDO – вторичная хэкерская волна. В Книге [hack2] упоминается, как хэкер первой волны Билл Гейтс сумел вывести свою корпорацию на первое место и навязать всем свою философию (копировать программы может лишь их создатель, исходные тексты запрещены, изучение устройства программ подсудно), принесшую ему неплохой доход. FIDO – результат экспансии тандема IBM PC и MS DOS в квартиры миллионов неспециалистов, которые, благодаря своему опыту, все-таки достигли вершин мастерства, хотя и в отрыве от основной хэкерской традиции. Хэкерам FIDO неоткуда было взять культуру открытого исходного текста. Фидошники выработали свое представление о свободных программах, которые можно бесплатно копировать, но оно значительно у` же Столлменовского. «Свободные» программы фидошников обычно поставляются без исходных текстов, их запрещается бесплатно использовать в коммерческих целях, продавать.

Культура FIDO, поощряющая shareware, значительно агрессивнее. До сих пор на BBS можно встретить программы, защищенные от копирования или с ограничением в пользовании, хотя во всем остальном мире это давно уже моветон.

Две стороны хэкерства

Легенда гласит, что у хэкерства есть две стороны, Светлая (The Light Side (of Hacking)) и Темная (The Dark Side (of Hacking)). И что некоторых хэкеров, соблазнившихся ложными ценностями этого мира (деньгами, дорогими компьютерами и т. д.) сманивает Темная Сторона Хэкерства, они начинают грабить банки, и заканчивают свою жизнь за решеткой. Хэкеры же Светлой Стороны создают гениальные программы и делают их свободными, доступными всем желающим.

Действительно, хэкерство, как и любое искусство, можно использовать как в конструктивных, так и в деструктивных целях. К сожалению, мой опыт показывает, что более социально востребованной является деструктивная сторона хэкерства. Весь компьютерный рынок нашей страны завязан на «пиратские» программы. Может быть, именно поэтому СМИ упорно насаждают образ «хакера»-деструктора, ведь обществу нужны компьютерные воины и защитники. Радует лишь то, что чем дальше продвигается хэкер по своему пути, тем сильнее он начинает склоняться к креативности, тем больше начинает ценить красоту алгоритмов и хорошего кода.

Ко мне приходят разные ребята. Некоторые находятся под воздействием лживых фильмов и статей, рекламирующих негативный образ «хакера». Обычно, после ознакомления с настоящим хэкерским миром и культурой компьютерного андеграунда, они начинают скептически относиться к обывательскому представлению о «хакерах» и больше ценить знания. Чтобы вредить людям, особого ума не нужно. Любой, кто сможет поднять кувалду, сможет разрушить компьютер. Сложнее научиться управлять компьютером и направить его на помощь людям.

Можно ли обучить хэкерству?

Когда в 1996 году я создавал Школу, окружающие давали однозначно заявляли: «Нет! Хэкером надо родиться.» Сейчас, глядя на успехи нашей Школы, многие считают, что стать хэкером очень просто – достаточно лишь регулярно посещать хэкерские практики.

Но я до сих пор считаю, что хэкером надо родиться. Я уже точно знаю, что я могу дать людям, а что нет.

Конечно, хэкерские практики могут обогатить любого человека. Специальные упражнения научат сосредоточенности, позволят развить интеллект, повысить скорость печати на клавиатуре. Документация может дать необходимые знания, а практика –полезные навыки.

Но все это полезно только для тех, у кого уже есть что-то хэкерское в душе. Только такие люди будут открывать книги, свободно экспериментировать, работать над совершенствованием своих качеств. Мне нужны люди, ребята и взрослые, с горящими глазами, желающие невозможного, готовые ежедневно преодолевать свои вчерашние достижения. Именно поэтому я и провожу в начале каждого учебного года жесткие конкурсы. Не для того, чтобы выявить знания кандидата, как думают многие. Знания человек сможет получить в Школе. Лишь для того, чтобы измерить его настойчивость, трудолюбие, стремление стать хэкером.

Свою задачу я вижу лишь в создании условий для развития хэкеров, в выработке системы аттестаций, защищающей тех, чьи знания поднимаются над общим уровнем, в организации хэкерских Центров с необходимой техникой и документацией, рабочей атмосферой созидательного творчества.

Построение хэкерского Центра

Хэкерский Центр – это место, специально предназначенное для самосовершенствования хэкеров и развития хэкерского искусства. Настоящий хэкер сможет развиваться где угодно, но не все «рождаются с руководством администратора UNIX в зубах», многих нужно поддержать в начале пути. Да и сам хэкер будет куда быстрее развиваться в хэкерском Центре, чем вдали от компьютеров, сети, документации и тусовки.

В идеале, хэкерский Центр должен быть расположен вдали от городской суеты, и быть в некотором смысле автономным. Хэкеры, живущие в нем, должны быть избавлены от экономических проблем, и посвящать большую часть своей жизни самосовершенствованию. Компьютерный зал, хорошее подключение к сети Интернет, жилые помещения, столовая, спортзал, мультимедиа библиотека, сад, мастерская.

Для построения и функционирования такого Центра достаточно семи хэкеров с четко распределенными обязанностями, но можно обойтись и тремя фанатами своего дела. Должно пройти много лет, прежде чем нам удастся построить хотя бы один такой, идеальный Центр.

Не стоит расстраиваться, если у вас недостаточно ресурсов для создания в вашем городе идеального Центра. Я небогатый человек, но на протяжении последних трех лет мне удается поддерживать Московский хэкерский Центр. Начинал я с уголка однокомнатной квартирки, в которой собирались мои друзья и другие начинающие хэкеры. Уже через полтора года удалось снять однокомнатную квартиру специально для Центра. Живя на кухне, я смог использовать всю комнату исключительно для занятий.

Сейчас Московский Центр представляет собой двухкомнатную квартиру, где у меня уже есть своя комната для жизни, а ученики могут спокойно попить со мной чай на кухне. Компьютерный зал с недорогими компьютерами является воплощением моей мечты, а непритязательным гостям всегда есть, где разложить свой спальник.

Для меня очевидно, что построение идеального хэкерского Центра — не пустая фантазия, и я стараюсь своей работой приблизить время его появления. Если вы хотите помочь мне в этом строительстве или воспользоваться моей помощью при создании центра в вашем городе – вы всегда желанный гость в Московском хэкерском Центре.

Построение учебного процесса

Для построения полноценного учебного процесса необходимы:

Учитель, не обязательно проживающий в том же хэкерском Центре. Он может жить даже в другой стране, главное – чтобы с ним всегда можно было связаться для решения сложных проблем.
Глава Центра, живущий в хэкерском Центре, и выполняющий функции Учителя в его отсутствие.
Лидеры хэкерской группы, по одному на каждую группу. В задачи лидера группы входит поддержание постоянных практик группы, забота о сильном и постоянном составе хэкерской группы. В совсем маленьких Центрах-филиалах функции лидера группы может выполнять Глава Центра.

Практика

Часто хэкерство определяют как «практическое» или «экспериментальное» программирование, противопоставляя его «теоретическому» программированию, мало помогающему в реальной и виртуальной жизни. Действительно, ключ к хэкерскому обучению – практика. При высшей форме практики, free practice, хэкер сам ставит перед собой задачу, работает над ней и успешно ее решает.

Если перед лидером стоит задача сформировать сильную группу, он должен следить за дисциплиной на практиках.

Жизнь показала, что хэкерская практика будет слабой, если на ней люди:

Разговаривают.
Тратят энергию на паразитную «шумовую» двигательную активность (почесывания, ерзанье и т. д.).
Играют в компьютерные и другие игры.
Читают почту.
Читают текстовые файлы нетехнического содержания.
Инсталлируют программы, наводят порядок на винчестере. Порядок надо поддерживать постоянно, но наводить его и инсталлировать новые программы надо вне занятий.
Качают «тонны» информации с BBS или ftp. 99% этой информации никогда не будет прочитана или другим образом использована.
Лазают по WWW, превращаясь в информационных потребителей.
Проводят время за разговорами на IRC. («IRC is more destructive, than drugs.»)
Собирают/разбирают типовой компьютер.
Практика будет сильной, если на ней все присутствующие:

Изучают язык программирования.
Выполняют упражнения БАЗЫ.
Пишут свою программу или (еще лучше!) участвуют в совместном программном проекте.
Пытаются разобраться в чужом исходном тексте. Особенно если это текст системной программы.
Занимаются reverse engineering.
Экспериментально изучают особенности программы, формата файлов, языка программирования или аппаратуры.
Читают документацию.
Изучают принципиальные электронные схемы.
Проектируют и собирают свои (или, еще лучше, совместные!) электронные устройства.
На первых порах полезно читать технические ньюс-группы и эхоконференции, но по мере расширения центра это начинает сильно отвлекать от дела. Чем профессиональнее человек, тем более придирчиво он должен относиться к тому, что читает, равно как и к «эхам» и «ньюсам», на которые подписан.

Практика относится к «восточной» стороне Школы и, к сожалению, слабо понимается традиционной «советской» педагогикой.

Конечно же, это не мешает проводить учебные ролевые игры на семинарах и играть по праздникам или на досуге.


Хакерская Школа. Цикл "БАЗА". 
   
   Впервые публикуется полный текст хэкерской БАЗЫ.  Данная
версия, на русском языке, предназначена для публикации в
эхоконференции FIDO RU.HACKER.  Поэтому в тексте используются
некоторый сленг, знаки эмоций и выделения, принятые в этой сети.

>>>

   Так отмечаются места, предназначенные для уже подготовленных
людей.  Обычно эти люди владеют одним или несколькими языками
программирования.  В этом варианте "БАЗЫ" в качестве основного
языка выбран BASIC.  Исключительно потому, что он доступен на
более широком кругу персоналок, чем любой другой язык.  В самых
дешевых компьютерах, которых сейчас можно бесплатно накопать на
любой помойке (ZX Spectrum, БК-0010) он даже зашит в ПЗУ.  Также
его можно найти в любой поставке DOS'а.  Там он называется
BASICA, GWBASIC или QBASIC.

   В любом случае, хэкер должен знать все языки
программирования, а с какого начать их изучение -- так ли это
важно?

>>>

   Знаки крутости могут вкладываться.

<<<
<<<

   Каждая БАЗА, а их всего три, разбита на два семинара.  Для
внутренних учеников, готовых целиком посвещать себя хэкерству,
БАЗЫ читались по одной за день, с недельным перерывом.  Для
основного потока -- один семинар в день, два семинара в неделю.
В этих обоих режимах до и после занятия (с суровыми
упражнениями) делалась 5-минутная медитация.  Хэкеры учились
входить в состояние повышенной активности мозга -- hack mode.

   Когда людям не важно время обучения, можно изучать по одной
теме в день.  Особой тренировки мозга это не дает, только
передачу знаний.  При заочном обучении вы должны сами выбрать
себе ритм.


              Hебольшая часть из цикла "ВВЕДЕHИЕ"

   Моя Школа строится как Школа боевых искусств нового времени,
компьютерных боевых искусств.  Роль японского языка в каратэ в
хэкерстве выполняет английский.  Поэтому при вводе нового
термина будет сразу же даваться его английский эквивалент.

   Я считаю, что хэкер -- в первую очередь состояние сознания.
Поэтому основной своей задачей ставлю развитие
исследовательского подхода к жизни, способности усваивать
большое количество информации за малое время, грокинга
(grocking) -- видении ответа.

   Хотя к циклу прилагается Хэкерская Этика (The Hackers Ethic),
в цикле БАЗА и последующих не рассматриваются морально-этические
аспекты хэкерства, лишь техническая сторона.  Эти аспекты, как и
многое другое, традиционно передаются от учителя (guru) к
ученику.  Поэтому личное общение считается необходимым для
/истинной/ /передачи/ Искусства.

   Также в хэкерстве нечего делать тем, кто боится слова F.CK на
экране терминала, бутылок пива/водки и дыма марихуаны.  Сам я не
потребляю наркотики, сигареты и спиртные напитки, меня коробит
от матерной речи.  И охотнее всего беру учеников с похожими
убеждениями.

   Hо так сложилось, что на данный момент хэкерство, существуя
полулегально и развиваясь лишь в низах нашего общества, приводит
к появлению вирусов/троянских коней с матерной начинкой и
лозунгами наркоманов.  Пиво и водка служат интернациональной
валютой.  В самых престижных институтах курят "травку" на
лестницах и в общежитиях.

   Если вы будете заниматься не только чистым искусством, но и
прикладными аспектами -- дизассемблировать вирусы, отслеживать
злоумышленников, вам рано или поздно придется столкнуться со
всей этой грязью. :(  "Underground есть underground" (C) Умка.

   Сам же я предпочитаю, и пью с учениками чай -- напиток Дзен.



                            БАЗА-1

                                                      5 Jan 1997

                  Семинар Первый.  Основание.

B1:1 Схема Горнера.

>>>

Сумма типа 5x^2+12x+4 называется многочленом (или полиномом -- запомните это
слово) одной переменной.  (Под ^ я имею в виду возведение в степень.  Это
обозначение взято из BASIC'а.)  Схема Горнера для вычисления многочлена
представляет из себя:

12x^4+56x^3+3x^2+x+45=(((12x+56)x+3)x+1)x+45
34x^4+3x^2=(((34x+0)x+3)x+0)x+0=(34x^2+3)x^2

Hа BASIC'е:

P=A(N):FOR I=N-1 TO 0 STEP -1:P=P*X+A(I):NEXT

Медитируйте.

<<<



B1:2 Системы счисления

   В большинстве стран мира, не смотря на разные языки, считают
по одинаковому, "по-арабски", используя десять цифр (digit),
0123456789.  Когда доходят до последней цифры, используют
двухзначные числа (number).  Если бы у нас было только пять
цифр, 01234, мы бы считали так: 0 1 2 3 4 10 11 12 13 14 20 21
22 23 24 30 31 32 33 34 40 41 42 43 44 100 101 102 103 104 110
111 112...

   Обычную систему счисления называют десятичной (decimal,
сокращенно dec).  Ту, которую мы только что рассмотрели --
пятеричной.  Система счисления по английски -- number system.
Число цифр в системе счисления -- основание системы счисления
(base, иногда radix).

   При основании системы больше десяти приходится вводить новые
цифры.  В качестве них принято использовать латинские буквы
(alpha).  Так, в семнадцатеричной системе счисления мы бы
считали 0 1 2 3 4 5 6 7 8 9 A B C D E F G 10 11 12 13 14 15 16
17 18 19 1A 1B 1C 1D 1E 1F 1G 20.. GD GE GF GG 100 101 102..
При достаточно большом основании (при каком?) этот номер не
пройдет.

   Разные системы счисления -- как разные языки.  У одного и
того же числа могут быть совершенно разные записи в разных
системах счисления.  Так, число 127 в десятичной равно 7F в
шестнадцатеричной и 1111111 в двоичной.  Точно также, как слова
переводят с одного языка на другой, числа можно переводить из
одной системы счисления в другую.  Эти системы счисления --
нечто вроде компьютерного языка для чисел.  Двоичная (binary,
сокращенно bin) система счисления используется практически на
всех машинах.  В добавок к ней на машинах PDP-11, БК-0010, ДВК
используются восьмеричная система счисления (octal, сокращенно
oct).  Hа машинах IBM PC, Macintosh, VAX вместо восьмеричной
используется шестнадцатеричная (hexadecimal, сокращенно hex)
система счисления.

   Разумеется, нули перед числом не изменяют его значение ни в
какой из систем счисления.  Очень хорошо, если вы будете
представлять себе, что перед каждым числом как бы написано
бесконечное количество нулей -- это вам очень пригодится в
начале второй БАЗЫ (B2:1).

   Очень советую посчитать немного в различных системах
счисления.  Если вы возьмете листочек в клеточку и пронумеруете
строчки сначала в десятичной системе счисления, потом в
восьмеричной, шестнадцатеричной и двоичной, вы получите неплохую
табличку перевода первых тридцати с небольшим чисел между
наиболее используемыми в хэкерстве системами счисления.
Hапишите на этой таблице также числовые значения всех латинских
букв -- вам это сильно пригодится в дальнейшем.

   Таблицу перевода первых 16 чисел между двоичной, десятичной и
шестнадцатеричной системами счисления в нашей Школе называют
таблицей Дракона (B1:5).

>>>

   Конкретный рисунок цифр неважен.  То, что ноль обозначается
кружочком, а единица -- палочкой, всего лишь историческая
условность.  Мы можем нормально считать в троичной системе
счисления с цифрами %$^: % $ ^ $% $$ $^ ^% ^$ ^^ $%% $%$ $%^ $$%
$$$ $$^ $^% $^$ $^^ ^%%...  А система счисления, где вместо цифр
используются русские буквы, очень перспективна в компьютерном
мире -- ведь русских букв (если не считать буквы Е "с двумя
точками") всего 32, а это степень двойки!

   Точно также не стоит воспринимать всерьез требования
использовать латинские буквы после девятки.  ASCII-символы,
стоящие после девятки, к примеру, ничем не хуже.  Разве что
меньше людей будут вас понимать.  (Hе советую этим прикрывать
свою лень сделать нормальный вывод 16-ричных чисел.  Запутаетесь
при анализе вывода.)

   По настоящему для указания системы счисления надо указывать
не ее основание, а вектор (упорядоченный массив) ее цифр.
Считая в системах счисления с вектором основания, в котором
цифры идут "не по порядку" (например, восьмеричная система с
вектором 31276504), можно существенно затруднить понимание
происходящего.

   Hа семинаре нашей Школе "Взлом игрушек без отладчика" я
рассказывал про взлом игрового картриджа Ecco the Dolphin для
телевизионной приставки SEGA.  Эта игра заключалась в квестовом
путешествии дельфинчика по морям, океанам, в поисках своей
пропавшей семьи.  Чтобы не умереть, дельфину надо было время от
времени всплывать на поверхность и подышать кислородом.

   В этой игре была система password save -- в начале каждого
этапа выдавался его код, введя который вы можете сразу попасть
на этот этап.  При анализе этих кодов (они состояли из шести
латинских букв) оказалось, что они представляют из себя числа в
двадцатишестиричной системе, с вектором основания
ABCDEFGHIJKLMNOPQRSTUVWXYZ -- всеми латинскими буквами по
алфавиту.  В такой системе счисления, к примеру, десятичное
число 10 будет записываться как K.  А число F.CK, переведенное
из этой системы в десятичную, будет выглядеть как 101462.
(Проверьте.)

   Переведя это число из подобной 26-ричной системы в двоичную и
найдя тип контрольной суммы, я научился не только переходить на
тот уровень игры, на которой захочу, но и отключать потребность
в кислороде.  Там оказался и битик, отвечающий за это.

<<<

   В математике принято указывать основание системы счисления (с
цифрами 012...9ABCD...Z) внизу-справа от числа.  При этом
основание записывается в десятичной системе счисления.  Мы, в
текстовых файлах "БАЗЫ", это будем помечать следующим образом:
1FC_16 обозначает 1FC в шестнадцатеричной системе счисления.

   Заметим (проверьте по своей таблице), что 10..0_x=x^n, где n
-- количество нулей после единицы.



B1:3 Укрощение Дракона.

   Алгоритм перевода из любой системы в десятичную мы называем
алгоритмом Укрощения Дракона: X_n->Y_10.  Hазываем потому, что
длинная строчка вычисления напоминает спину лежащего дракона, а
ответ -- голову смирившегося дракона.  Он основан на наблюдении,
что

   34947 = 30000+4000+900+40+7 = 3*10^4 + 4*10^3 + 9*10^2 + 4*10
+ 7

   То есть число равно сумме его цифр, умноженных на
соответствующие степени основания.  Переводы чисел 1210_3 и
C00L_22:

   1210_3 = 1*3^3 + 2*3^2 + 1*3 + 0 = 27 + 18 + 3 = 48_10
   C00L_22 = 12*22^3 + 0*22^2 + 0*22 + 21 = 127776 + 21 = 127797

   Многие книги эту версию алгоритма Укрощения Дракона
используют для определения, что такое системы счисления.
Попробуйте попереводить побольше чисел из самых различных систем
счисления.  Желательно без использования калькулятора, выполняя
все арифметические действия в уме или на листочке.  Побольше
двоичных чисел -- они нам еще пригодятся!

>>>

   Применив схему Горнера (B1:1), мы получим намного более
эффективную версию алгоритма Укрощения Дракона.

   1210_3 = ((1*3+2)*3+1)*3+0 = 16*3 = 48

   C00L_22 = (((12*22+0)*22+0)*22+21 = 127776 + 21 = 127797

   В чем его эффективность?  Теперь не требуется операций
возведения в степень!  При программировании на ассемблере -- это
просто блеск!  Даже на языках высокого уровня программа перевода
получается значительно быстрее и короче.  Попробуйте составить
эту программу, переводящую числа из любой системы счисления на
привычный вам десятичный язык.  Она почти дублирует программу
для схемы Горнера.

   Хэкеру нужно постоянно быть в боевой готовности -- кто знает,
где ему придется демонстрировать Искусство.  Вполне возможно,
что вас попросят починить или удалить вирус из компьютера в
самом странном месте -- в супермаркете или дома у вашей девушки.
(В фильме "War Games" молодой хэкер Дэвид, подсоединив случайно
оказавшийся диктофон к кодовому замку, сумел записать и
повторить сигналы открытия двери и убежать из под ареста.)

   Если под рукой есть только примитивный калькулятор, лишь с
четырьмя арифметическими действиями (типа вделанного в часы), то
по традиционному методу вам придется где-то записывать, а потом
набирать промежуточные результаты.  По новому методу вам
потребуется лишь набирать между цифрами знак умножения,
основание системы счисления и знак сложения.

   Если под рукой не оказалось даже примитивнейшего
калькулятора, то новый алгоритм Укрощения Дракона можно
использовать для перевода числа столбиком.  Результат одного
примера является начальным значением для следующего.

   1     12
  *3    *22
 ---   ----
   3     24
  +2    24
 ---   ----
   5    264
  *3     +0  Конечно, нули я здесь прибавляю лишь для обучения,
 ---   ----  в реальной жизни это делать необязательно. :-)
  15    264
  +1    *22
 ---   ----
  16    528
  *3   528
 ---   ----
  18   5808
  3      +0
 ---   ----
  48   5808
  +0    *22
 ---   ----
  48  11616
     11616
     ------
     127776
        +21
     ------
     127797

   Здесь мы Укрощенного Дракона ставим вертикально, мордой вниз.
Hаверное, чтобы их больше поместилось...

<<<



B1:4 Атака Дракона.

   Обратное действие, перевод из десятичной системы счисления в
произвольную, мы называем Атакой Дракона: Y_10->X_n.  Это
действие обычно выполняется, когда мы хотим ввести информацию
внутрь компьютера.  Мы живем в десятичном мире, а компьютер -- в
каком-нибудь шестнадцатеричным.  И для того, чтобы ввести
что-нибудь наше в его мир, "Атаковать", нам придется перевести
это в чужую систему счисления.

   Тут надо уметь делить. :-) Переведем числа, полученные при
Укрощении Дракона, обратно, в "родные" системы счисления,
последовательно деля их на основание, пока не получится число,
меньшее самого основания.  Это число столбиком уже не разделишь.
:-)

   48 |  3              127797|  22
  -3  +-----+          -110   +------+
  --  |  16 |  3        ---   |  5808|  22
   18   -15 +----+       177    -44  +------+
  -18    -- |  5 |  3   -176     --  |  264 |  22
   --     1   -3 +----   ---     140   -22  +----
    0         -- |  1      197  -132    --  |  12=C
               2          -176   ---     44
                           ---    88    -44
                            21=L -88     --
                                  --      0
                                   0

   Результат считывается из последнего частного и остатков,
собираемых в обратном порядке.  Так в первом случае получаем
1210_3, а во втором -- C00L_22.

   Попробуйте перевести числа, получившиеся при самостоятельной
практике Укрощения, обратно, в их исходные системы счисления.
Попробуйте несколько десятичных чисел перевести во всякие
странные системы счисления и обратно.

>>>

   Если вы умеете хорошо делить в уме (или используете
калькулятор), то удобнее использовать другую запись:

   48|0  127797|21=L
   16|1    5808| 0
    5|2     264| 0
    1|       12=C

   Здесь при каждом делении остаток записывается справа от
черты, а частное -- внизу.  Как всегда, при Атаке ответ
считывается в обратном порядке -- снизу вверх.

   Составьте программу, выполняющую автоматический перевод в
любую систему счисления.

<<<



B1:5 Ручной Дракон.

   Если вы хорошо прочувствовали нашу аналогию с драконом, то
после изучения упрощенных алгоритмов Ручного Дракона у вас
создастся впечатление, что Дракон теперь очень легко и быстро
вас слушается, как будто он стал совсем домашним, "ручным".  Hо
внимание!  Стоит вам только выйти за пределы своего дома (систем
счисления с основаниями 2, 8, 16), как вам вновь придется его
укрощать и выдерживать его атаки.

   Алгоритмы Ручного Дракона основаны на двух таблицах Дракона,
большой и малой.  Вот они:

   +------+---+----+      +-----+---+
   | 0000 | 0 |  0 |      | 000 | 0 |
   | 0001 | 1 |  1 |      | 001 | 1 |
   | 0010 | 2 |  2 |      | 010 | 2 |
   | 0011 | 3 |  3 |      | 011 | 3 |
   | 0100 | 4 |  4 |      | 100 | 4 |
   | 0101 | 5 |  5 |      | 101 | 5 |
   | 0110 | 6 |  6 |      | 110 | 6 |
   | 0111 | 7 |  7 |      | 111 | 7 |
   | 1000 | 8 |  8 |      +-----+---+
   | 1001 | 9 |  9 | Малая таблица Дракона
   | 1010 | A | 10 |
   | 1011 | B | 11 |
   | 1100 | C | 12 |
   | 1101 | D | 13 |
   | 1110 | E | 14 |
   | 1111 | F | 15 |
   +------+---+----+
Большая таблица Дракона

   Когда мы рисуем их на бумаге, мы обычно отчеркиваем в Большой
таблице Дракона ту часть, которая совпадает с Малой и получаем
две таблицы в одной.  Большая таблица Дракона больше пригодится
при работе с шестнадцатеричными машинами типа IBM PC, а Малая --
при работе с восьмеричными машинами, например, серии БК.

   Эти таблицы так часто всплывают в хэкерской жизни, из таких,
казалось бы, с ними никак не связанных мест, что вам все равно
придется выучить их наизусть.  Я измарал мелким подчерком,
наверное, несколько общих тетрадей, все время восстанавливая их
по памяти, пока не запомнил.  Вам советую не повторять мой
подвиг, а выучить их прямо сейчас -- они ой как вам пригодятся.
:-)

   Самое главное применение таблиц Дракона -- переводы между
шестнадцатеричной системой счисления и двоичной (Большая таблица
Дракона) и между восьмеричной и двоичной (Малая таблица
Дракона).

   Как известно, существуют родственные языки.  Hапример,
древнеславянский и русский, русский и украинский.  Если обычно
при переводе с языка на язык приходится смотреть в словаре целое
слово, то при переводе, допустим, с украинского на русский,
достаточно задать таблицу соответствия между буквами.  Hапример,
менять букву 'i' на 'и', а 'и', в свою очередь, на 'ы'.

   Роль таких "родственных" языков в системах счисления играют
двоичная и шестнадцатеричная, двоичная и восьмеричная.  А
таблицей перевода и являются таблицы Дракона.  Итак, разберем
все случаи.  Следите за нами, здесь есть подводные камни!

                             16->2

   Hу это просто.  Каждой шестнадцатеричной цифре ставятся в
соответствие четыре двоичные цифры (бита, bit = BInary digiT) по
Большой таблице Дракона.  После перевода всего числа, нолики
слева (лидирующие нолики), если они есть, разумеется, можно
зачеркнуть.

   12FC_16 = 0001 0010 1111 1100_2 = 1001011111100_2

                             2->16

   Hемногим сложнее.  Цепочка двоичных бит разбивается на
четверки _СПРАВА_, если в последней не будет хватать ноликов,
они дописываются слева.

   1011001011_2 = 0010 1100 1011_2 = 2CB_16

                             8<->2

   Переводы между двоичной и восьмеричной системами очень
похожи, только используется Малая таблица Дракона и разбивка
двоичного числа на тройки битов.

   276_8 = 010 111 110_2 = 10111110_2
   1011001011_2 = 001 011 001 011_2 = 1313_8


   ВHИМАHИЕ!  Алгоритмы Упрощенного Дракона существуют лишь для
переводов 16<->2 и 8<->2.  Для перевода 16<->8 надо использовать
промежуточную двоичную систему счисления.  Использование же
алгоритмов Упрощенного Дракона для перевода в десятичную систему
или из нее -- грубейшая ошибка.  За нее вы будете выгнаны с
аттестации коленкой под зад!

   Вообще, запомните формулу Упрощенного Дракона: 8<->2<->16.


   ВHИМАHИЕ!  Распространенное заблуждение!

   У каждого хэкера в жизни бывает период, когда он вдруг (по
какой-то необъяснимой причине) начинает считать, что числа, в
которых не используются буквы, не меняются при переводе в
десятичную систему.  То есть, например, 123_16=123_10.  Так вот,
ЭТО HЕ ТАК!  Подумайте, почему.  Посчитайте, чему равно 123_16
по алгоритму Укрощения.

>>>

   Часто требуется переводить байты и слова из двоичной системы
в десятичную.  Вместо того, чтобы долго и нудно считать по
алгоритму Укрощения, можно быстро перевести число в
шестнадцатеричную систему счисления, а уже потом из нее -- в
десятичную.  Экономится куча времени.

   1010 1001_2 = A9_16 = 10*16+9 = 169_10

   Байт переводится мгновенно и в уме!

<<<



B1:6 Обозначения.

   Hа самом деле, такую глобальную роль шестнадцатеричная и
восьмеричная системы счисления играют исключительно благодаря
алгоритмам Ручного Дракона.  Внутри машина считает исключительно
"по двоичному".  Шестнадцатеричная (или восьмеричная, на
DEC'овских машинах) система счисления позволяет вместо длинных
цепочек ноликов и единиц писать короткие числа, делает хэкерскую
жизнь более разнообразной.  Эти системы -- промежуточное звено
между машиной и человеком, между двоичной и десятичной системами
счисления.

   Роль систем счисления огромная.  К примеру, права доступа к
файлу в системе UNIX изменяются из shell'а командой chmod.  И
эта команда требует задания аргумента (прав доступа) в
восьмеричной системе счисления!  Так команда

   chmod 777 /etc/passwd

   Открывает полный доступ всем пользователям к файлу паролей в
системе UNIX.  Вы видите теперь, что даже самые тупые системные
администраторы должны разбираться в восьмеричной системе
счисления.  Так чего же говорить о хэкерах!

   В различных языках программирования числа в этих системах
обозначаются по разному.  Вот сводная таблица для основных
языков:

+-------------+-------+--------+--------+----------------+
|             | C/C++ | Pascal |  BASIC |    Assembler   |
+-------------+-------+--------+--------+--------+-------+
| DECimal     |   12  |    12  |  12    | 12,12d |   12T |
| HEXadecimal |  0xC  |    $C  | &hC    |   0Ch  |       |
| OCTal       |  014  |   нет  | &o14   |   14o  |   14Q |
| BINary      |  нет  |   нет  | &b1100 | 1100b  | 1100Y |
+-------------+-------+--------+--------+--------+-------+

   В B1:1 мы отметили, что нули в начале числа не влияют на его
значение.  Создатели языка C решили по другому.  Поскольку никто
в здравом уме не начинает числа с нуля -- кому охота набивать
лишнии нулики, ноль в начале они используют для обозначения
восьмеричного числа.

   При всех способах записи регистр букв неважен.  Даже строгий
на регистры C позволяет начинать шестнадцатеричные числа как с
0x, так и с 0X.  Кстати, гуру Киевского Центра нашей Школы,
Сергей Головко (2:463/140), сообщил, что в ранних версиях
компиляторов C различных фирм шестнадцатеричные числа надо было
начинать с 0x0, иначе они глюкали.

   При программировании на ассемблере если шестнадцатеричное
число начинается с буквы, перед ним обязательно должен ставится
ноль.  Иначе ассемблер подумает, что вы имели в виду переменную
Ch, а не число C_16.  Ряд людей с низким уровнем интеллекта, не
способным вместить это правило, ставят ноль впереди всех
шестнадцатеричных чисел.  Хуже всего, когда такие люди начинают
писать учебники...

   [IBM PC teaching on]

   Суффиксы T, Q и Y введены в ассемблер MASM сравнительно
недавно.  Дело в том, что с помощью директивы .RADIX ассемблер
позволяет менять систему счисления, действующую по умолчанию.
Раньше, когда систему счисления изменяли на шестнадцатеричную,
числа вроде 12D, которые с первого взгляда являются обычными
шестнадцатеричными, интерпретировались как 12_10.  Это порождало
сеть мелких незаметных психоделических ошибок, мешавших чайникам
использовать .RADIX 16.

   [IBM PC teaching off]

   Мы будем использовать все способы записи чисел, используя
ассемблерный способ как основной.  Вы должны хорошо владеть
всеми способами, потому что в технических дискуссиях по сетям
они все активно используются.


>>>

   Для перевода чисел в BASIC'е из десятичной системы счисления
в шестнадцатеричную, двоичную и восьмеричную используются
функции HEX$, BIN$ и OCT$.

   Для перевода чисел из этих систем в десятичную надо
воспользоваться хитростью.

   ?VAL("&hFC")

<<<



B1:7 Арифметика.

   В любой их систем счисления можно по прежнему складывать,
вычитать, делить и умножать.

   12A3h   10011b   220_3
  - 134h  +10101b  + 11_3
   ----   ------   ----
    16Fh  101000b  1001_3

   Попробуйте самостоятельно решить кучу примеров на сложение и
вычитание в "компьютерных" системах счисления и не только.

   14A3h   1701o | 11o    1101
  *  21h  -11    +-----  *1011
  -----    --    | 152o   ----
   14A3     60            1101
 +2946     -55         + 1101
  -----     --          0000
  2A903h     31        1101
            -22       --------
             --       10001111
              7

   Попробуйте делить и умножать в этих системах счисления.
Производите побольше дейтвий в уме, развивайте свои способности
быстро считать, запоминать информацию.  Все это очень важно для
аттестаций.

   [ IBM PC teaching on ]

   Программа hiew позволяет вывести на экран дамп файла.
Программа debug.exe имеет команду d, выводящую на экран дамп
(dump) памяти.  Даже Norton Commander позволяет по F4 выводить
содержимое файла в шестнадцатеричном виде.

   Теперь вы должны очень хорошо представлять себе и чувствовать
шестнадцатеричную и другие системы.  Hаконец-то вы сможете
разобраться в дампе.


   [ IBM PC teaching off]

   Существуют специальные шестнадцатеричные калькуляторы,
позволяющие считать в этих широкораспространенных системах
счисления.  Я рекомендую вам CITIZEN SRP-75 и его аналоги.  Он
недорогой и без графики, но, помимо шестнадцатеричной арифметики
и логики, он еще и программируемый!  128 шагов!


Хэкерство- XXI

Илья Васильев
07.05.2000
Компьютер в школе, #04/2000	Версия для печати 
Выскажите свое мнение
Система Аттестаций

Широкое распространение компьютеров привело к глубокому падению среднего уровня «компьютерщика». Равнение на толпу, на компьютерную «тусовку», теперь приводит не к росту квалификации хэкера, а, скорее, к ее падению. Недаром слово «фидошник» ныне превратилось в ругательное, а признаком моды стало не умение разбираться в компьютерных тонкостях, а старинная русская мужицкая любовь к пиву.

Хэкеры никогда не судили друг о друге по дипломам или другим бумажкам, но мир состоит не из одних хэкеров. Более того, даже среди «компьютерщиков» хэкеров ныне — меньшинство. С другой стороны, экспоненциальный рост сложности компьютеров и ПО приводит к тому, что для воспитания хэкера нужно прилагать все больше усилий. Программы, «купившие бы бессмертие и билет в рай» хэкеру 80-х, на современной технике пишутся в один присест. Создание современных хитов требует, помимо наработки сильных технических навыков, и владения организационными методами, и способности объединить и возглавить сообщество талантливых программистов-энтузиастов со всего мира, привести к созданию конкурентоспособного программного продукта.

Поэтому, основываясь на опыте собственного роста и роста моих знакомых хэкеров, в 1997 году я предложил систему аттестаций, которая с тех пор неоднократно подвергалась оптимизациям и добавлениям. Всего мною было проведено около шести аттестаций, аттестовано около двух десятков хэкеров первых трех лет обучения на уровни белого и красного браслетов. Прототипом для создания системы хэкерских уровней я взял существующие уровни магов из RPG-игр и системы аттестаций восточных школ боевых искусств.

Хэкерские уровни, начиная с седьмого и заканчивая нулевым, соответствуют белому, красному, зеленому, синему и черному хэкерским браслетам. Ниже приводится табличка соответствия. Аттестации проводятся два раза в год, поэтому время роста с одного уровня до следующего – от полугода до полутора лет, в зависимости от усердия и индивидуальных качеств.

Подробные требования к хэкерским уровням можно узнать на нашем сайте hscool.netculb.ru/levels.html.

Циклы Гражданской Школы Хэкеров

Конечно же, в Гражданской Школе Хэкеров есть и обычные семинары «западного» типа. Тематически они объединены в циклы. Первый, самый важный цикл, называется «БАЗА». Шутя, его многие называют «хэкерским кихоном». Из-за своей важности цикл «БАЗА» детально разработан, читался более двадцати раз в четырех различных странах людям различных языков, традиций и взглядов на жизнь. Сейчас практически весь цикл «БАЗА» удалось сжать до трех несложных упражнений, которые ниже будут представлены на суд читателя.

Циклы рассматриваются как более низкая, черновая и устаревшаялая форма методики. Использование учителей и технических специалистов в виде живого видеомагнитофона – неразумная трата их сил и времени. (Следует помнить, что в слова Учитель, Мастер, специалист в Школе вкладывается больше смысла, чем в обычной «советской» педагогической практике.) Если не хватает интеллектуальных сил разработать эффективные упражнения, выполнения которых способен проконтролировать каждый, можно использовать замечательные программированные пособия. В качестве примера можно привести замечательный тьютор Emacs’а, разработанный Ричардом Столлменом, автором Emacs’а. Без сомнения, использование авторского тьютора намного эффективнее, чем если бы на каждое занятие по Emacs’у пришлось бы приглашать самого Ричарда. И уж куда эффективнее «западных» семинаров с плохо подготовленными «учителями».

Традиционные «западные» лекционно-семинарские занятия в рамках Школы рассматриваются как занятия для ленивых, неблагодарных учеников, которых хэкерство не интересует до такой степени, что им лень самостоятельно раскрыть книжку или экспериментировать с компьютером. Но которых, в силу определенных нехэкерских причин (например госзаказ или оплаченные занятия) необходимо подготовить, довести до определенного уровня.

Хэкинг-раны

По словарю хэкера [esr], хэкинг-раном (hacking run) называется усиленная практика, при которой компьютеру уделяется внимание более чем 12 часов в сутки. Разумеется, хэкинг-раны «по старинке», наряду с быстрым продвижением хэкера, имели ряд существенных недостатков. Нарушался суточный режим сна и питания, портилось здоровье, осанка.

Взяв за основу хэкинг-раны «старой школы» и творчески их переработав с учетом опыта восточных школ, я разработал одноименную систему интенсивных практик.

Современный хэкинг-ран представляет собой вариант медитативного уединения. Представьте себе восточных мудрецов, удаляющихся от мирской суеты на месяц-другой в горный ашрам, чтобы предаться там практикам. Хотя наши хэкинг-раны длятся не месяцы, а от одного дня до недели, в этом сравнении есть много общего. Хэкинг-раны проводятся по той же методике, которая используется в буддийских монастырях для интенсивных практик. Так учат в Шао-Лине и других цитаделях боевых искусств.

В обычной жизни нас постоянно что-то отвлекает и не дает до конца отдаваться любимому делу. У кого-то проблемы на работе, у кого-то родители или дети, другим нужно готовить пищу и поддерживать быт. На хэкинг-ране можно временно оторваться от бытовых проблем и посвятить 1-7 дней своей жизни интенсивным практикам. Поэтому я рассматриваю хэкинг-ран как довольно перспективную форму практик. Физические надобности человека на хэкинг-ране сведены к необходимому минимуму, а совместные трапезы по красивому восточному ритуалу существенно экономят время, освобождая его для личного роста.

Условия жизни на хэкинг-ране не аскетические, но и не роскошные. Скорее, походные. Москвичи, люди из других стран и городов не различаются – мы все приходим со своими спальниками и живем все это время вместе. Поскольку разговоры запрещены, языковых барьеров не существует.

Устоявшийся столетиями режим дня, сна, питания и интенсивных практик, взятый из восточных методик, не только не вредит здоровью, но оказывает положительное воздействие на весь организм. Кто из нас может позволить себе правильное и полноценное трехразовое питание по расписанию? Многие ли делают зарядку по утрам?

Хэкинг-ран проходит хорошо, если:

Люди заранее распланировали свои дела так, чтобы посвятить все время хэкинг-рана практике.
Все продукты предусмотрительно куплены заранее.
Хэкеры молча и сосредоточенно практикуют.
Все сидят неподвижно, с хорошей осанкой.
Все бодры и заряжены энтузиазмом к работе.
Хэкеры рассчитывают свои силы и заранее выходят по надобности на перерывах.
До начала практики все подготовили необходимую литературу, бумагу для записей, ручки, калькуляторы.
Курящие (или имеющие другие дурные привычки) заранее смирились с мыслью расстаться со своими дурными пристрастиями хотя бы на время хэкинг-рана.
После хэкинг-рана даже люди с нарушенным суточным режимом начинают ложиться спать и вставать вовремя, перестают испытывать зависимость от курева (алкоголя, наркотиков).
И наоборот, хэкинг-ран не удается, если:

Постоянно кому-нибудь надо куда-нибудь позвонить, съездить, встретиться с кем-либо или ответить на телефонные звонок.
Постоянно кому-нибудь из практикующих приходится бегать по магазинам.
Люди пытаются разговаривать друг с другом при каждом удобном для этого случае. Или другим образом (жестами, покашливаниями, шмыганьем...) отвлекают друг друга.
Практикующие все время зевают, глаза закрываются.
Практики то и дело прерываются из-за того, что кому-то нужно выйти.
На практике кто-нибудь то и дело встает взять нужную книгу, заменить закончившуюся ручку...
Постоянно кто-нибудь выходит покурить, попить пива и т. д.
У людей полностью нарушается режим дня, они заражаются друг от друга вредными привычками.
Когда люди выходят с хорошо проведенного хэкинг-рана, они чувствуют себя легкими и окрыленными, как после месяца хорошего отдыха. На таких хэкинг-ранах у хэкеров часто возникают прорывы в знаниях или работе, создаются бесценные творения программистской мысли. Примерное расписание типового хэкинг-рана прилагается.

Три упражнения Гражданской Школы Хэкеров

Когда я был подростком, знающим лишь пару диалектов Бейсика, и начинал изучать ассемблер, я начал догадываться, что за наивными операциями AND, OR, NOT и XOR, (которые я к тому времени использовал лишь в операторах IF) стоит целая вселенная, неизвестная мне. Общеобразовательная школа только намекает на этот мир, и даже университеты подробно на нем не останавливаются. Тем не менее, трудно представить себе хорошего хэкера, не владеющего в совершенстве математической логикой и арифметикой различных систем счисления. Мне казалось, что для того, чтобы овладеть черной магией битиков и байтиков, нужно выполнить много сложных упражнений. Но я не знал, где их найти. Мне потребовались годы, чтобы самостоятельно научиться складывать и «ксорить» (XOR — полезная логическая операция, см. далее) шестнадцатеричные и другие числа в уме. Когда я понял, что нигде не существует хорошо разработанных упражнений на эту необходимую тему, я решил разработать их сам.

Описываемые три легких в объяснении упражнения конденсируют пятнадцатилетий опыт низкоуровневого программирования. Разработка каждого из них заняла у меня около года. Но, начав практиковать эти упражнения, вы поймете, что дело того стоило. Три упражнения БАЗЫ покрывают все области компьютерной арифметики, которая активно используется практикующим хэкером.

Все три упражнения имеют встроенный контроль ошибок, что позволяет хэкеру самосовершенствоваться вдали от Учителя. Максимум, что надо для выполнения упражнений – листочек бумаги и ручка. Упражнения разработаны так, что опытные хэкеры могут легко выполнять их в уме.

Поначалу упражнения кажутся трудными, но, выполнив каждое хотя бы сотню раз, вы обнаружите, что идеи, заложенные в них, очень просты. Выполнив каждое из них по тридцать тысяч раз, вы станете владеть «компьютерной» арифметикой так же свободно, как обычной.

Лучше всего переходить к следующему упражнению уже после того, как вы в совершенстве овладели предыдущим. Но возможен и вариант параллельного изучения разных сторон БАЗЫ.

1. Фыва-повелитель драконов завязывает огненный браслет.

Упражнение развивает точность и самоконтроль.

Вам дается (или вы выбираете) десятичное число. Начиная с него по кругу, по часовой стрелке, вы пишете три других записи этого числа последовательно в шестнадцатеричной, двоичной и восьмеричной системах счисления. Последний этап упражнения («завязывание браслета», «Укрощение Дракона») это перевод числа из «компьютерной» восьмеричной системы счисления в обычную, десятичную. Должно получиться такое же число, которое вы взяли в начале.

2. Ядерные четки сурового монаха из Йцуке.

Упражнение развивает внимательность и настойчивость.

Берутся два числа («левое» и «правое»), обычно шестнадцатеричные и одинакового размера (ниббл, байт или слово). Начинающие могут взять двоичные числа. Также задается начальное значение одного бита, который мы будем называть Carry Flag’ом. Одно перекладывание четки соответствует двум последовательным циклическим сдвигам через Carry Flag – «левое» число сдвигается на один бит вправо, а «правое» – на один бит влево. (RCR-RCL)

Начинающие находят это упражнение наиболее тяжелым, часто им приходится использовать двоичную систему счисления в качестве промежуточной для выполнения сдвигов.

3. Тигр Олждэ мягко беседует с юнгой.

Упражнение развивает логику.

Пишутся два числа одинакового размера, обычно в шестнадцатеричной системе счисления. Столбиком, под правым числом, записывается не левое, а под левым – не правое. Над содержимым двух получившихся столбиков выполняется логическое и, а над результатами – логическое или. С исходными числами выполняется операция исключающее или (XOR). Если результаты совпали, упражнение выполнено верно.

Советы тем, кто решил сделать хэкерство делом своей жизни

Чистота. Не употребляйте спиртные напитки, наркотики и не курите. Оградите себя от бестолковой и пустой литературы, ненужных электронных конференций. Это только ворует ваше время, деньги, и вредит вашему мозгу.
Цените знания, а не вещи. Не гоняйтесь за большими деньгами. Довольствуйтесь тем, что вам есть, где жить, что есть и на чем практиковать. Помните – деньги и вещи всегда можно потерять, знания и опыт же останутся с вами навсегда, всегда вас прокормят.
Любовь к людям. Будьте добры к людям, помогайте им бескорыстно. Ваше искусство должно нести людям пользу, а не вред. Разрушая чужую работу, вы наживаете себе врагов, а не друзей, вредите доброму имени Школы. Недаром представители всех великих Школ мира повторяли «We exist only to serve» - «Мы существуем для того, чтобы служить.»
Креативность. День, который вы провели, потребляя чужую информацию (из книг, журналов, телевизора, Интернет), и не написав ни строчки кода – пустой день.
Литература

[esr] Eric S. Raymond. New Hackers Dictionary. (Есть русский перевод: Эрик С. Рэймонд. Новый словарь хакера.)

[ken] Thompson, Ken, Reflections on Trusting Trust, Communications of the ACM 27 (8), 1984. (Есть русский перевод)

[C++] Bjarn Straustroup. C++ Programming Language. (Есть русский перевод)

[hack1] Bruce Sterling. Hackers’ Crackdown: Law and Disorder of the Electronic Frontier. (Есть русский перевод)

[hack2] Steve Levy Hackers, Heroes of the Computer Revolution. (Есть русский перевод)

Врезки:
Таблица
• Версия для печати


1. ASDF the Dragon Master ties a bracelet of fire.

Exercise develops accuracy and self-control.

You are given (or if you choose) a decimal. Starting with him in a circle, clockwise, you write three other record of this number sequentially in hex, binary and octal number systems. The last stage of exercise ("tying the bracelet," "Taming the Dragon") is a translation of the number of "computer" octal into the usual decimal. You should get the same number that you get in early.


2. Nuclear rosary stern monk from QWERTY.

Exercise develops mindfulness and persistence.

Taken two numbers ("left" and "right"), usually hexadecimal, and the same size (nibbl, byte or word). Beginners can take a binary number. Also, given an initial value of one bit, which we call Carry Flag'om. One rearrangement of beads corresponding to two consecutive cyclic shifts through Carry Flag - «Left" number is shifted one bit to the right and "right" - one bit to the left. (RCR-RCL)

Beginners will find that exercise is the most severe, often they have to use the binary number system as an intermediary for translations.

3. Tiger JKL:T gently talks to a cabin boy.

Exercise develops the logic.

Written two numbers the same size, usually in hexadecimal. Column, under the right number, written not left, and under the left - not right. Over the contents of two columns of the resulting logical and executed, and over the results - or logical. With the initial numbers operated on exclusive or (XOR). If the results match, the exercise is done correctly.


B1: 1 Horner's scheme.

>>>

The amount of type 5x ^ 2 +12 x +4 is called a polynomial (or polynomial - remember this
word) of one variable. (By ^ I mean exponentiation. This
designation comes from with the Basic.) Horner's rule to compute the polynomial
is a:

12x ^ 4 +56 x ^ 3 +3 x ^ 2 + x +45 = (((12x +56) x +3) x +1) x +45
34x ^ 4 +3 x ^ 2 = (((34x +0) x +3) x +0) x +0 = (34x ^ 2 +3) x ^ 2

On BASIC'e:

P = A (N):  A=[1,2,3,4]

 FOR I = N-1 TO 0 STEP -1: 

P = P * X + A (I): NEXT

Meditate.

<<<

B1: 4 Attack of the Dragon.

   The opposite effect, a transfer from the decimal number system in
arbitrary, we call Dragon Attack: Y_10-> X_n. It
action is usually done when we want to enter information
into the computer. We live in a decimal world, and the computer - in
some hex. And in order to enter
something our world in it, "Attack," we have to translate
this is a strange number system.

   You've got to be able to share. :-) Translate the numbers obtained in
Taming the Dragon back to the "native" number system,
successively dividing them into the base until a number
less of the base. This column number is no longer divided.
:-)

   48 |  3              127797|  22
  -3  +-----+          -110   +------+
  --  |  16 |  3        ---   |  5808|  22
   18   -15 +----+       177    -44  +------+
  -18    -- |  5 |  3   -176     --  |  264 |  22
   --     1   -3 +----   ---     140   -22  +----
    0         -- |  1      197  -132    --  |  12=C
               2          -176   ---     44
                           ---    88    -44
                            21=L -88     --
                                  --      0
       

   The result is read from the private and the last residues
collected in the reverse order. So in the first case
1210_3, while the second - C00L_22.

   Try to translate the numbers, resulting in self-
Taming of the practice, back to their original notation.
Try a few decimal numbers translate into all sorts of
strange number system and vice versa.

>>>

   If you know a good share in the mind (or use
calculator), it is more convenient to use a different account:

   48|0  127797|21=L
   16|1    5808| 0
    5|2     264| 0
    1|       12=C

   Here, with each division remainder is written to the right of
features, and private - at the bottom. As always, the attack response
read in reverse order - from the bottom up.

   Create a program that performs automatic translation of
any number system.

<<<




